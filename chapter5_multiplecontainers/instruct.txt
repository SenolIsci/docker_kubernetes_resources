# a project to coıutn number of visits to a page
use nodejs app and redis as two containers. redis wil old numberofvisits data.

$mkdir visits
$cd visits
$code .


#we use docker-compose to create a docker-compose.yml file to define multiple containers
#docker-compose is automatşcally conncet containers/services to communicate : no need for port mapping
#inside vs code create docker-compose.yml


# to build first time  an image and run as containers.  (while inside project folder)
#if you make changes use --build
$ docker-compose up

#start run in backgorund
$ docker-compose up  -d
 
# to re-build first time  an image and run as containers.   (while inside project folder)
$ docker-compose up --build

#to see runninf containres 
$ docker-compose ps   (only shows inside the project folder where yml stays)


#then open web browser and type the address:    http://localhost:4001/
#then you will see visit count and refresh each time count will increase

#container maintenace and automatic restart of container that exited 
#docker-compose retart policies:
		 "no"
		 always     (also includes exit(0) exit without error)
		 on-failure      # exit other than status code 0 
		 unless-stopped
 



#stop containers
$ docker-compose down


docker-file:

	version: '3'
	services:
	  redis-server:
		image: 'redis'
	  node-app:
		restart: on-failure
		build: .
		ports:
		  - '4001:8081'


package.json:

	{
	  "dependencies": {
		"express": "*",
		"redis": "2.8.0"
	  },
	  "scripts": {
		"start": "node index.js"
	  }
	}


index.js:

	const express = require('express');
	const redis = require('redis');
	const process = require('process');

	const app = express();
	const client = redis.createClient({
	  host: 'redis-server',
	  port: 6379,
	});
	client.set('visits', 0);

	app.get('/', (req, res) => {
	  process.exit(0);
	  client.get('visits', (err, visits) => {
		res.send('Number of visits ' + visits);
		client.set('visits', parseInt(visits) + 1);
	  });
	});

	app.listen(8081, () => {
	  console.log('listening on port 8081');
	});